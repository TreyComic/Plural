Benfits of unit testing:
Allow for feedback, Automated checking allowing the user to see in real time if new code breaks
the base functions of the code, 

Usually when testing a test file is pre-built into IntelliJ to use side by side of your code
To create tests right click on src folder -> New -> Java Class.
OR to test specifically you can right click the name of the class and choose show context actions
this allows for the option to test specific methods from an autogenerated testing file.

Annotate your test methods with @org.junit.jupiter.api.Test

Use methods like assertEquals(), assertTrue(), assertNotNull() to verify specific behaviors

once we have a file created we can move into setting in JUnit 5

Alternatives-
In IntelliJ IDEA, locate your project explorer on the left-hand side.
Right-click on your project root folder and select "New" -> "Directory". Name this directory something like libs or lib.
Move the downloaded JAR files into this directory.

@Test: Marks a method as a test method.

@ParameterizedTest: Indicates that a method is a parameterized test.

@RepeatedTest: Indicates that a method should be repeated a specified number of times.

@TestFactory: Marks a method as a dynamic test factory for generating tests at runtime.

@TestTemplate: Marks a method as a template for repeated tests with varying input.

@BeforeEach: Denotes a method that should be executed before each test method.

@AfterEach: Denotes a method that should be executed after each test method.

@BeforeAll: Denotes a method that should be executed once before all test methods in the current class.

@AfterAll: Denotes a method that should be executed once after all test methods in the current class.

@DisplayName: Provides a custom display name for the test method in test reports.

@Disabled: Marks a test method as disabled or skipped.

